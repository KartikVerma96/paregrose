generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String?
  provider  String?  @default("credentials")
  providerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  // Relations
  cartItems      CartItem[]
  wishlistItems  WishlistItem[]
  whatsappOrders WhatsAppOrder[]
  reviews        Review[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  imageUrl    String?  @map("image_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  products Product[]
}

model Product {
  id                  Int      @id @default(autoincrement())
  name                String
  slug                String   @unique
  description         String?
  shortDescription    String?  @map("short_description")
  categoryId          Int?     @map("category_id")
  price               Decimal  @db.Decimal(10, 2)
  originalPrice       Decimal? @db.Decimal(10, 2) @map("original_price")
  discountPercentage  Decimal? @default(0) @db.Decimal(5, 2) @map("discount_percentage")
  sku                 String?  @unique
  brand               String?
  material            String?
  sizeOptions         Json?    @map("size_options")
  colorOptions        Json?    @map("color_options")
  availability        String   @default("In Stock") @db.VarChar(20)
  stockQuantity       Int      @default(0) @map("stock_quantity")
  weight              Decimal? @db.Decimal(8, 2)
  dimensions          Json?
  careInstructions    String?  @map("care_instructions")
  isFeatured          Boolean  @default(false) @map("is_featured")
  isBestseller        Boolean  @default(false) @map("is_bestseller")
  isNewArrival        Boolean  @default(false) @map("is_new_arrival")
  isActive            Boolean  @default(true) @map("is_active")
  metaTitle           String?  @map("meta_title")
  metaDescription     String?  @map("meta_description")
  metaKeywords        String?  @map("meta_keywords")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  category           Category?           @relation(fields: [categoryId], references: [id])
  images             ProductImage[]
  cartItems          CartItem[]
  wishlistItems      WishlistItem[]
  whatsappOrderItems WhatsAppOrderItem[]
  reviews            Review[]
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int      @map("product_id")
  imageUrl   String   @map("image_url")
  altText    String?  @map("alt_text")
  isPrimary  Boolean  @default(false) @map("is_primary")
  sortOrder  Int      @default(0) @map("sort_order")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CartItem {
  id           Int      @id @default(autoincrement())
  sessionId    String   @map("session_id")
  userId       Int?     @map("user_id")
  productId    Int      @map("product_id")
  quantity     Int      @default(1)
  selectedSize String?  @map("selected_size")
  selectedColor String? @map("selected_color")
  priceAtTime  Decimal  @db.Decimal(10, 2) @map("price_at_time")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model WhatsAppOrder {
  id              Int      @id @default(autoincrement())
  orderId         String   @unique @map("order_id")
  userId          Int?     @map("user_id")
  customerName    String   @map("customer_name")
  customerPhone   String   @map("customer_phone")
  customerEmail   String?  @map("customer_email")
  whatsappMessage String   @map("whatsapp_message")
  totalAmount     Decimal  @db.Decimal(10, 2) @map("total_amount")
  status          String   @default("sent") @db.VarChar(20)
  sentAt          DateTime @default(now()) @map("sent_at")
  confirmedAt     DateTime? @map("confirmed_at")
  completedAt     DateTime? @map("completed_at")
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user  User?              @relation(fields: [userId], references: [id])
  items WhatsAppOrderItem[]
}

model WhatsAppOrderItem {
  id           Int      @id @default(autoincrement())
  orderId      Int      @map("order_id")
  productId    Int?     @map("product_id")
  productName  String   @map("product_name")
  productSku   String?  @map("product_sku")
  quantity     Int
  unitPrice    Decimal  @db.Decimal(10, 2) @map("unit_price")
  totalPrice   Decimal  @db.Decimal(10, 2) @map("total_price")
  selectedSize String?  @map("selected_size")
  selectedColor String? @map("selected_color")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  order   WhatsAppOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product?      @relation(fields: [productId], references: [id], onDelete: SetNull)
}

model Review {
  id            Int      @id @default(autoincrement())
  productId     Int      @map("product_id")
  userId        Int      @map("user_id")
  rating        Int
  title         String?
  comment       String?
  isApproved    Boolean  @default(true) @map("is_approved")
  helpfulCount  Int      @default(0) @map("helpful_count")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NewsletterSubscriber {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String?
  isActive       Boolean   @default(true) @map("is_active")
  subscribedAt   DateTime  @default(now()) @map("subscribed_at")
  unsubscribedAt DateTime? @map("unsubscribed_at")
}

model ContactMessage {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String?
  subject     String?
  message     String
  status      String   @default("new") @db.VarChar(20)
  adminNotes  String?  @map("admin_notes")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
}

model BusinessSetting {
  id          Int      @id @default(autoincrement())
  settingKey  String   @unique @map("setting_key")
  settingValue String  @map("setting_value")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
}