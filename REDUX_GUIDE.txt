===================================================================
                    REDUX GUIDE FOR PAREGROSE PROJECT
===================================================================

This guide explains how Redux works in your Paregrose e-commerce project and 
how to write Redux code step by step.

===================================================================
1. WHAT IS REDUX AND WHY WE USE IT
===================================================================

Redux is a state management library that helps us manage data that needs to be 
shared across multiple components in our React application.

In your project, Redux manages:
- Cart items (products added to cart)
- Wishlist items (products saved for later)
- User authentication state (planned)

Without Redux, passing cart data between Navbar, Product pages, and Cart page 
would require "prop drilling" - passing data through many components.

===================================================================
2. HOW REDUX IS SET UP IN YOUR PROJECT
===================================================================

Your Redux setup follows this structure:

src/
‚îú‚îÄ‚îÄ store/
‚îÇ   ‚îî‚îÄ‚îÄ index.js              (Main store configuration)
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îú‚îÄ‚îÄ cart/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cartSlice.js      (Cart state management)
‚îÇ   ‚îî‚îÄ‚îÄ wishlist/
‚îÇ       ‚îî‚îÄ‚îÄ wishlistSlice.js  (Wishlist state management)
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ useCart.js            (Easy-to-use cart functions)
‚îÇ   ‚îî‚îÄ‚îÄ useWishlist.js        (Easy-to-use wishlist functions)
‚îî‚îÄ‚îÄ components/
    ‚îî‚îÄ‚îÄ ReduxProvider.jsx     (Makes Redux available to all components)

===================================================================
3. UNDERSTANDING THE FLOW
===================================================================

Here's how data flows in your Redux setup:

1. USER ACTION: User clicks "Add to Cart" button
2. COMPONENT: Calls useCart hook function
3. HOOK: Dispatches action to Redux store
4. SLICE: Updates state and saves to localStorage
5. COMPONENT: Re-renders with new state

Example:
User clicks "Add to Cart" ‚Üí addItem(product) ‚Üí addToCart action ‚Üí 
cartSlice reducer ‚Üí state updated ‚Üí UI re-renders

===================================================================
4. UNDERSTANDING SLICES (THE CORE CONCEPT)
===================================================================

A "slice" is like a mini-store for one feature. Your project has:

CART SLICE (src/features/cart/cartSlice.js):
- State: { items: [], loading: false, error: null }
- Actions: addToCart, removeFromCart, updateQuantity, etc.
- Reducers: Functions that update state

WISHLIST SLICE (src/features/wishlist/wishlistSlice.js):
- State: { items: [], loading: false, error: null }
- Actions: addToWishlist, removeFromWishlist, etc.
- Reducers: Functions that update state

===================================================================
5. HOW TO READ EXISTING REDUX CODE
===================================================================

Let's break down the cart slice:

```javascript
const cartSlice = createSlice({
  name: 'cart',                    // Name of this slice
  initialState: {                  // Starting state
    items: [],
    loading: false,
    error: null,
  },
  reducers: {                      // Functions that change state
    addToCart: (state, action) => {
      // action.payload contains the product data
      const product = action.payload;
      // Find if product already exists
      const existingItem = state.items.find(item => item.id === product.id);
      
      if (existingItem) {
        // Increase quantity if exists
        existingItem.quantity += 1;
      } else {
        // Add new item if doesn't exist
        state.items.push({...product, quantity: 1});
      }
    },
    // More reducers...
  },
});
```

===================================================================
6. HOW TO USE REDUX IN COMPONENTS
===================================================================

Your project uses custom hooks to make Redux easy to use:

USING CART:
```javascript
import { useCart } from '@/hooks/useCart';

function ProductCard({ product }) {
  const { addItem, isInCart, count } = useCart();
  
  const handleAddToCart = () => {
    addItem(product);  // This adds product to Redux store
  };
  
  return (
    <div>
      <p>Cart has {count} items</p>
      <button onClick={handleAddToCart}>
        {isInCart(product.id) ? 'In Cart' : 'Add to Cart'}
      </button>
    </div>
  );
}
```

USING WISHLIST:
```javascript
import { useWishlist } from '@/hooks/useWishlist';

function ProductCard({ product }) {
  const { addItem, removeItem, isInWishlist } = useWishlist();
  
  const handleWishlistToggle = () => {
    if (isInWishlist(product.id)) {
      removeItem(product.id);
    } else {
      addItem(product);
    }
  };
  
  return (
    <button onClick={handleWishlistToggle}>
      {isInWishlist(product.id) ? '‚ù§Ô∏è' : 'ü§ç'}
    </button>
  );
}
```

===================================================================
7. HOW TO CREATE A NEW REDUX SLICE (STEP BY STEP)
===================================================================

Let's say you want to add a "Products" slice to manage product data:

STEP 1: Create the slice file
Create: src/features/products/productsSlice.js

```javascript
import { createSlice } from '@reduxjs/toolkit';

const productsSlice = createSlice({
  name: 'products',
  initialState: {
    items: [],
    loading: false,
    error: null,
    currentProduct: null,
  },
  reducers: {
    setProducts: (state, action) => {
      state.items = action.payload;
      state.loading = false;
    },
    setCurrentProduct: (state, action) => {
      state.currentProduct = action.payload;
    },
    setLoading: (state, action) => {
      state.loading = action.payload;
    },
    setError: (state, action) => {
      state.error = action.payload;
      state.loading = false;
    },
    clearError: (state) => {
      state.error = null;
    },
  },
});

export const {
  setProducts,
  setCurrentProduct,
  setLoading,
  setError,
  clearError,
} = productsSlice.actions;

// Selectors (functions to get data from state)
export const selectProducts = (state) => state.products.items;
export const selectCurrentProduct = (state) => state.products.currentProduct;
export const selectProductsLoading = (state) => state.products.loading;
export const selectProductsError = (state) => state.products.error;

export default productsSlice.reducer;
```

STEP 2: Add to store
Update src/store/index.js:

```javascript
import productsReducer from '@/features/products/productsSlice';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    wishlist: wishlistReducer,
    cart: cartReducer,
    products: productsReducer,  // Add this line
  },
  // ... rest of config
});
```

STEP 3: Create custom hook
Create: src/hooks/useProducts.js

```javascript
import { useDispatch, useSelector } from 'react-redux';
import { useCallback } from 'react';
import {
  setProducts,
  setCurrentProduct,
  setLoading,
  setError,
  clearError,
  selectProducts,
  selectCurrentProduct,
  selectProductsLoading,
  selectProductsError,
} from '@/features/products/productsSlice';

export const useProducts = () => {
  const dispatch = useDispatch();
  
  // Get state
  const products = useSelector(selectProducts);
  const currentProduct = useSelector(selectCurrentProduct);
  const loading = useSelector(selectProductsLoading);
  const error = useSelector(selectProductsError);
  
  // Actions
  const setProductsData = useCallback((products) => {
    dispatch(setProducts(products));
  }, [dispatch]);
  
  const setCurrentProductData = useCallback((product) => {
    dispatch(setCurrentProduct(product));
  }, [dispatch]);
  
  const setLoadingState = useCallback((isLoading) => {
    dispatch(setLoading(isLoading));
  }, [dispatch]);
  
  const setErrorState = useCallback((error) => {
    dispatch(setError(error));
  }, [dispatch]);
  
  const clearErrorState = useCallback(() => {
    dispatch(clearError());
  }, [dispatch]);
  
  return {
    // State
    products,
    currentProduct,
    loading,
    error,
    
    // Actions
    setProductsData,
    setCurrentProductData,
    setLoadingState,
    setErrorState,
    clearErrorState,
  };
};
```

STEP 4: Use in components
```javascript
import { useProducts } from '@/hooks/useProducts';

function ProductList() {
  const { products, loading, setProductsData, setLoadingState } = useProducts();
  
  useEffect(() => {
    const fetchProducts = async () => {
      setLoadingState(true);
      try {
        const response = await fetch('/api/products');
        const data = await response.json();
        setProductsData(data);
      } catch (error) {
        setErrorState(error.message);
      }
    };
    
    fetchProducts();
  }, []);
  
  if (loading) return <div>Loading...</div>;
  
  return (
    <div>
      {products.map(product => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  );
}
```

===================================================================
8. COMMON PATTERNS IN YOUR PROJECT
===================================================================

PATTERN 1: Adding items to arrays
```javascript
addToCart: (state, action) => {
  const product = action.payload;
  const existingItem = state.items.find(item => item.id === product.id);
  
  if (existingItem) {
    existingItem.quantity += 1;  // Update existing
  } else {
    state.items.push({...product, quantity: 1});  // Add new
  }
}
```

PATTERN 2: Removing items from arrays
```javascript
removeFromCart: (state, action) => {
  const productId = action.payload;
  state.items = state.items.filter(item => item.id !== productId);
}
```

PATTERN 3: Updating specific items
```javascript
updateQuantity: (state, action) => {
  const { productId, quantity } = action.payload;
  const item = state.items.find(item => item.id === productId);
  
  if (item) {
    item.quantity = quantity;
  }
}
```

PATTERN 4: localStorage integration
```javascript
// Save to localStorage after state update
const saveCartToStorage = (cart) => {
  localStorage.setItem('cart', JSON.stringify(cart));
};

// Load from localStorage on initial state
const loadCartFromStorage = () => {
  const saved = localStorage.getItem('cart');
  return saved ? JSON.parse(saved) : [];
};
```

===================================================================
9. SELECTORS: GETTING DATA FROM STATE
===================================================================

Selectors are functions that extract specific data from your Redux state:

SIMPLE SELECTORS:
```javascript
export const selectCartItems = (state) => state.cart.items;
export const selectCartCount = (state) => state.cart.items.length;
```

COMPUTED SELECTORS:
```javascript
export const selectCartTotal = (state) => 
  state.cart.items.reduce((total, item) => total + (item.price * item.quantity), 0);
```

PARAMETERIZED SELECTORS:
```javascript
export const selectIsInCart = (productId) => (state) => 
  state.cart.items.some(item => item.id === productId);
```

===================================================================
10. DEBUGGING REDUX
===================================================================

BROWSER DEVTOOLS:
Install Redux DevTools extension to see:
- Current state
- Action history
- State changes over time

CONSOLE LOGGING:
```javascript
addToCart: (state, action) => {
  console.log('Adding to cart:', action.payload);
  console.log('Current items:', state.items);
  // ... reducer logic
}
```

===================================================================
11. BEST PRACTICES FOR YOUR PROJECT
===================================================================

1. KEEP SLICES SIMPLE: One slice per feature (cart, wishlist, products)

2. USE CUSTOM HOOKS: Don't use useSelector/useDispatch directly in components

3. STRUCTURE ACTIONS CLEARLY:
   - addToCart, removeFromCart (clear names)
   - Include all needed data in action.payload

4. HANDLE LOADING STATES:
   - loading: true when starting async operations
   - loading: false when done
   - error: store error messages

5. PERSIST IMPORTANT DATA:
   - Save cart/wishlist to localStorage
   - Load on app startup

6. USE SELECTORS:
   - Don't access state.cart.items directly
   - Use selectCartItems(state) instead

===================================================================
12. COMMON MISTAKES TO AVOID
===================================================================

‚ùå DON'T MUTATE STATE DIRECTLY:
```javascript
// Wrong
state.items.push(newItem);

// Right (Redux Toolkit allows this syntax)
state.items.push(newItem);  // Actually works with Redux Toolkit!
```

‚ùå DON'T PUT FUNCTIONS IN STATE:
```javascript
// Wrong
state.callback = () => console.log('hello');

// Right - only plain data
state.message = 'hello';
```

‚ùå DON'T FORGET TO EXPORT ACTIONS:
```javascript
export const { addToCart, removeFromCart } = cartSlice.actions;
```

‚ùå DON'T FORGET TO ADD REDUCER TO STORE:
```javascript
// In store/index.js
reducer: {
  cart: cartReducer,  // Don't forget this!
}
```

===================================================================
13. QUICK REFERENCE FOR YOUR PROJECT
===================================================================

TO ADD TO CART:
```javascript
const { addItem } = useCart();
addItem(product);
```

TO REMOVE FROM CART:
```javascript
const { removeItem } = useCart();
removeItem(productId);
```

TO CHECK IF IN CART:
```javascript
const { isInCart } = useCart();
const inCart = isInCart(productId);
```

TO GET CART COUNT:
```javascript
const { count } = useCart();
// count contains total number of items
```

TO GET CART TOTAL:
```javascript
const { total } = useCart();
// total contains price sum
```

SAME PATTERNS WORK FOR WISHLIST:
```javascript
const { addItem, removeItem, isInWishlist, count } = useWishlist();
```

===================================================================
14. WHEN TO WRITE NEW REDUX CODE
===================================================================

CREATE A NEW SLICE WHEN:
- You have data that multiple components need
- Data needs to persist across page navigation
- You have complex state logic (like cart calculations)

EXAMPLES FOR YOUR PROJECT:
- User authentication state
- Product search/filter state
- Order history
- User preferences
- Shopping categories

DON'T USE REDUX FOR:
- Local component state (form inputs, modals)
- Data that only one component uses
- Simple boolean flags

===================================================================
15. EXERCISE: TRY ADDING A FILTER SLICE
===================================================================

Practice by creating a filter slice for product filtering:

1. Create src/features/filters/filtersSlice.js
2. Add state for: category, priceRange, sortBy, searchQuery
3. Add actions: setCategory, setPriceRange, setSortBy, setSearchQuery
4. Add to store configuration
5. Create useFilters hook
6. Use in product listing component

This will help you understand the pattern and build confidence!

===================================================================

Remember: Redux in your project is designed to be simple and predictable. 
Start with the existing cart/wishlist patterns, and you'll quickly understand 
how to extend it for new features!